package market;

public class ArrayFactory {
	
	private double [] vector;
	private double  value;
	private int columns;
	private int rows;
	
	// Empty constructor
	public ArrayFactory(){}
	
	// Create a matrix repeating a vector by rows
	public double [][] repMat(double [] vector, int rows, int columns){
		double [][] matrix = new double[rows][columns];
		for (int r = 0; r < rows; r++){
			for (int c = 0; c < columns; c++){
				matrix [r][c] = vector[r];	
			}
		}
		return matrix;
	}
	
	// Create a vector repeating a value
	public double [] repVec(double value, int length){
		double [] vector = new double[length];
		for (int i = 0; i < length; i++){
			vector [i] = value;	
		}
		return vector;
	}
	
	// Creating a vector from a matrix
	public double [] mat2vec(double [][] matrix, int nrows, int ncols){
		double [] vector = new double[nrows * ncols];
		int k = 0;
		while (k < nrows * ncols) {
			for (int i = 0; i < nrows; i++){
				for (int j = 0; j < ncols; j++){
					vector[k] = matrix[i][j];
					k  = k + 1;
				}
			}
		}
		return vector;
	}
	
	// Creating a matrix from a vector
	public double[][] vec2mat(double[] vector, int nrows, int ncols){
		double[][] matrix = new double[nrows][ncols];
		int k = 0;
		while (k < nrows * ncols) {
			for (int i = 0; i < nrows; i++){
				for (int j = 0; j < ncols; j++){
					matrix[i][j] = vector[k];
					k  = k + 1;
				}
			}
		}
		return matrix;
	}
}
